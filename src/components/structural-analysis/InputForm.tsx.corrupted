// =====================================
// ðŸš€ FIXED INPUT FORM - All Input Issues Resolved
// Professional Form with Safe Input Handling
// =====================================

import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Alert, AlertDescription } from '../ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { 
  CheckCircle, 
  AlertTriangle,
  FileText, 
  Building,
  Hammer,
  Layers,
  Zap,
  Mountain
} from 'lucide-react';

import {
  ProjectInfo,
  Geometry,
  MaterialProperties,
  Loads,
  SeismicParameters,
  SoilData,
  ValidationResult
} from './interfaces';

interface InputFormProps {
  projectInfo: ProjectInfo;
  geometry: Geometry;
  materials: MaterialProperties;
  loads: Loads;
  seismicParams: SeismicParameters;
  soilData: SoilData;
  validation: ValidationResult | null;
  validationLoading: boolean;
  onUpdate: (section: 'project' | 'geometry' | 'materials' | 'loads' | 'seismic' | 'soil', data: any) => void;
  onValidate: () => void;
}

// Safe value converter to prevent NaN
const safeNumber = (value: string, defaultValue: number = 0): number => {
  const parsed = parseFloat(value);
  return !isNaN(parsed) && isFinite(parsed) ? parsed : defaultValue;
};

const safeInteger = (value: string, defaultValue: number = 0): number => {
  const parsed = parseInt(value);
  return !isNaN(parsed) && isFinite(parsed) ? parsed : defaultValue;
};

export const InputForm: React.FC<InputFormProps> = ({
  projectInfo,
  geometry,
  materials,
  loads,
  seismicParams,
  soilData,
  validation,
  validationLoading,
  onUpdate,
  onValidate
}) => {
  const [activeTab, setActiveTab] = useState('project');

  // Occupancy options for building function
  const occupancyOptions = [
    { value: 'residential', label: 'Hunian' },
    { value: 'office', label: 'Perkantoran' },
    { value: 'commercial', label: 'Komersial' },
    { value: 'industrial', label: 'Industri' },
    { value: 'educational', label: 'Pendidikan' },
    { value: 'healthcare', label: 'Kesehatan' }
  ];

  // Helper function to get field-specific validation messages
  const getFieldValidation = (fieldName: string) => {
    if (!validation) return { error: undefined, warning: undefined };
    
    const fieldError = validation.errors.find(err => 
      err.field === fieldName || err.field.includes(fieldName)
    );
    const fieldWarning = validation.warnings.find(warn => 
      warn.field === fieldName || warn.field.includes(fieldName)
    );
    
    return {
      error: fieldError?.message,
      warning: fieldWarning?.message
    };
  };

  // Form Field Component with validation integration
  const FormField: React.FC<{
    label: string;
    fieldName?: string; // For validation lookup
    error?: string;
    warning?: string;
    children: React.ReactNode;
  }> = ({ label, fieldName, error, warning, children }) => {
    // Get validation messages for this field
    const fieldValidation = fieldName ? getFieldValidation(fieldName) : { error: undefined, warning: undefined };
    
    // Use explicit error/warning or field validation
    const finalError = error || fieldValidation.error;
    const finalWarning = warning || fieldValidation.warning;
    
    return (
      <div className="space-y-2">
        <Label className={finalError ? 'text-red-600' : ''}>{label}</Label>
        {children}
        {finalError && (
          <p className="text-xs text-red-600 flex items-center gap-1">
            <AlertTriangle className="h-3 w-3" />
            {finalError}
          </p>
        )}
        {finalWarning && !finalError && (
          <p className="text-xs text-yellow-600 flex items-center gap-1">
            <AlertTriangle className="h-3 w-3" />
            {finalWarning}
          </p>
        )}
      </div>
    );
  };

  return (
    <div className="space-y-6">
      {/* Validation Status - Enhanced Display */}
      {validation && (
        <div className="space-y-2">
          {/* Main Status Alert */}
          <Alert className={validation.isValid ? "border-green-200 bg-green-50" : "border-red-200 bg-red-50"}>
            <AlertDescription>
              <div className="flex items-center gap-2">
                {validation.isValid ? (
                  <CheckCircle className="h-4 w-4 text-green-600" />
                ) : (
                  <AlertTriangle className="h-4 w-4 text-red-600" />
                )}
                <span className={validation.isValid ? "text-green-800" : "text-red-800"}>
                  {validation.isValid 
                    ? `Validation passed${validation.warnings.length > 0 ? ` (${validation.warnings.length} warnings)` : ''}` 
                    : `${validation.errors.length} error${validation.errors.length > 1 ? 's' : ''} found`}
                </span>
              </div>
              
              {/* Error List */}
              {validation.errors.length > 0 && (
                <div className="mt-3">
                  <p className="text-xs font-medium text-red-800 mb-1">Errors:</p>
                  <ul className="space-y-1">
                    {validation.errors.slice(0, 5).map((error, idx) => (
                      <li key={idx} className="text-xs text-red-700">
                        â€¢ <span className="font-medium">{error.field}:</span> {error.message}
                      </li>
                    ))}
                    {validation.errors.length > 5 && (
                      <li className="text-xs text-red-600">... and {validation.errors.length - 5} more errors</li>
                    )}
                  </ul>
                </div>
              )}
            </AlertDescription>
          </Alert>
          
          {/* Warning Alert - Separate and Always Visible */}
          {validation.warnings.length > 0 && (
            <Alert className="border-yellow-200 bg-yellow-50">
              <AlertDescription>
                <div className="flex items-center gap-2 mb-2">
                  <AlertTriangle className="h-4 w-4 text-yellow-600" />
                  <span className="text-yellow-800 font-medium">
                    {validation.warnings.length} warning{validation.warnings.length > 1 ? 's' : ''}
                  </span>
                </div>
                <ul className="space-y-1">
                  {validation.warnings.slice(0, 3).map((warning, idx) => (
                    <li key={idx} className="text-xs text-yellow-700">
                      â€¢ <span className="font-medium">{warning.field}:</span> {warning.message}
                    </li>
                  ))}
                  {validation.warnings.length > 3 && (
                    <li className="text-xs text-yellow-600">... and {validation.warnings.length - 3} more warnings</li>
                  )}
                </ul>
              </AlertDescription>
            </Alert>
          )}
        </div>
      )}

      {/* Main Input Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Parameter Input Struktur
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-6">
              <TabsTrigger value="project">
                <Building className="h-4 w-4 mr-1" />
                Proyek
              </TabsTrigger>
              <TabsTrigger value="geometry">
                <Hammer className="h-4 w-4 mr-1" />
                Geometri
              </TabsTrigger>
              <TabsTrigger value="materials">
                Material
              </TabsTrigger>
              <TabsTrigger value="loads">
                <Layers className="h-4 w-4 mr-1" />
                Beban
              </TabsTrigger>
              <TabsTrigger value="seismic">
                <Zap className="h-4 w-4 mr-1" />
                Seismik
              </TabsTrigger>
              <TabsTrigger value="soil">
                <Mountain className="h-4 w-4 mr-1" />
                Tanah
              </TabsTrigger>
            </TabsList>
            
            {/* PROJECT INFO TAB */}
            <TabsContent value="project" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <FormField label="Nama Proyek" fieldName="projectName">
                  <Input
                    value={projectInfo.name || ''}
                    onChange={(e) => onUpdate('project', { ...projectInfo, name: e.target.value })}
                    placeholder="Nama proyek struktur"
                  />
                </FormField>
                
                <FormField label="Lokasi" fieldName="location">
                  <Input
                    value={projectInfo.location || ''}
                    onChange={(e) => onUpdate('project', { ...projectInfo, location: e.target.value })}
                    placeholder="Kota, Provinsi"
                  />
                </FormField>
                
                <FormField label="Fungsi Bangunan" fieldName="buildingFunction">
                  <Select
                    value={projectInfo.buildingFunction || 'office'}
                    onValueChange={(value) => onUpdate('project', { ...projectInfo, buildingFunction: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Pilih fungsi bangunan" />
                    </SelectTrigger>
                    <SelectContent style={{zIndex: 9999}}>
                      {occupancyOptions.map(option => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormField>
                
                <FormField label="Kategori Risiko" fieldName="riskCategory">
                  <Select
                    value={projectInfo.riskCategory || 'II'}
                    onValueChange={(value: any) => onUpdate('project', { ...projectInfo, riskCategory: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Pilih kategori risiko" />
                    </SelectTrigger>
                    <SelectContent style={{zIndex: 9999}}>
                      <SelectItem value="I">I - Risiko Rendah</SelectItem>
                      <SelectItem value="II">II - Risiko Standard</SelectItem>
                      <SelectItem value="III">III - Risiko Menengah</SelectItem>
                      <SelectItem value="IV">IV - Risiko Tinggi</SelectItem>
                    </SelectContent>
                  </Select>
                </FormField>
              </div>
            </TabsContent>
            
            {/* GEOMETRY TAB */}
            <TabsContent value="geometry" className="space-y-4">
              <div className="grid grid-cols-3 gap-4">
                <FormField label="Panjang Bangunan (m)">
                  <Input
                    type="number"
                    value={geometry.length?.toString() || ''}
                    onChange={(e) => onUpdate('geometry', { 
                      ...geometry, 
                      length: safeNumber(e.target.value, 40) 
                    })}
                    placeholder="40"
                  />
                </FormField>
                
                <FormField label="Lebar Bangunan (m)">
                  <Input
                    type="number"
                    value={geometry.width?.toString() || ''}
                    onChange={(e) => onUpdate('geometry', { 
                      ...geometry, 
                      width: safeNumber(e.target.value, 20) 
                    })}
                    placeholder="20"
                  />
                </FormField>
                
                <FormField label="Jumlah Lantai">
                  <Input
                    type="number"
                    value={geometry.numberOfFloors?.toString() || ''}
                    onChange={(e) => onUpdate('geometry', { 
                      ...geometry, 
                      numberOfFloors: safeInteger(e.target.value, 3) 
                    })}
                    placeholder="3"
                  />
                </FormField>
                
                <FormField label="Tinggi per Lantai (m)">
                  <Input
                    type="number"
                    step="0.1"
                    value={geometry.heightPerFloor?.toString() || ''}
                    onChange={(e) => onUpdate('geometry', { 
                      ...geometry, 
                      heightPerFloor: safeNumber(e.target.value, 3.5) 
                    })}
                    placeholder="3.5"
                  />
                </FormField>
                
                <FormField label="Bentang Kolom X (m)">
                  <Input
                    type="number"
                    step="0.5"
                    value={geometry.baySpacingX?.toString() || ''}
                    onChange={(e) => onUpdate('geometry', { 
                      ...geometry, 
                      baySpacingX: safeNumber(e.target.value, 6) 
                    })}
                    placeholder="6.0"
                  />
                </FormField>
                
                <FormField label="Bentang Kolom Y (m)">
                  <Input
                    type="number"
                    step="0.5"
                    value={geometry.baySpacingY?.toString() || ''}
                    onChange={(e) => onUpdate('geometry', { 
                      ...geometry, 
                      baySpacingY: safeNumber(e.target.value, 6) 
                    })}
                    placeholder="6.0"
                  />
                </FormField>
              </div>
            </TabsContent>
            
            {/* MATERIALS TAB */}
            <TabsContent value="materials" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <FormField label="Mutu Beton fc' (MPa)">
                  <Select
                    value={materials.fc?.toString() || '25'}
                    onValueChange={(value) => onUpdate('materials', { 
                      ...materials, 
                      fc: safeInteger(value, 25) 
                    })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Pilih mutu beton" />
                    </SelectTrigger>
                    <SelectContent style={{zIndex: 9999}}>
                      {[17, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70].map(fc => (
                        <SelectItem key={fc} value={fc.toString()}>
                          fc' = {fc} MPa
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </FormField>
                
                <FormField label="Mutu Baja fy (MPa)">
                  <Select
                    value={materials.fy?.toString() || '400'}
                    onValueChange={(value) => onUpdate('materials', { 
                      ...materials, 
                      fy: safeInteger(value, 400) 
                    })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Pilih mutu baja" />
                    </SelectTrigger>
                    <SelectContent style={{zIndex: 9999}}>
                      <SelectItem value="240">BjTP-24 (240 MPa)</SelectItem>
                      <SelectItem value="400">BjTS-40 (400 MPa)</SelectItem>
                      <SelectItem value="500">BjTS-50 (500 MPa)</SelectItem>
                    </SelectContent>
                  </Select>
                </FormField>
              </div>
            </TabsContent>
            
            {/* LOADS TAB */}
            <TabsContent value="loads" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <FormField label="Beban Mati (kN/mÂ²)">
                  <Input
                    type="number"
                    step="0.1"
                    value={loads.deadLoad?.toString() || ''}
                    onChange={(e) => onUpdate('loads', { 
                      ...loads, 
                      deadLoad: safeNumber(e.target.value, 4.0) 
                    })}
                    placeholder="4.0"
                  />
                </FormField>
                
                <FormField label="Beban Hidup (kN/mÂ²)">
                  <Input
                    type="number"
                    step="0.1"
                    value={loads.liveLoad?.toString() || ''}
                    onChange={(e) => onUpdate('loads', { 
                      ...loads, 
                      liveLoad: safeNumber(e.target.value, 2.5) 
                    })}
                    placeholder="2.5"
                  />
                </FormField>
                
                <FormField label="Kecepatan Angin (m/s)">
                  <Input
                    type="number"
                    value={loads.windSpeed?.toString() || ''}
                    onChange={(e) => onUpdate('loads', { 
                      ...loads, 
                      windSpeed: safeNumber(e.target.value, 30) 
                    })}
                    placeholder="30"
                  />
                </FormField>
                
                <FormField label="Beban Hidup Atap (kN/mÂ²)">
                  <Input
                    type="number"
                    step="0.1"
                    value={loads.roofLiveLoad?.toString() || ''}
                    onChange={(e) => onUpdate('loads', { 
                      ...loads, 
                      roofLiveLoad: safeNumber(e.target.value, 1.0) 
                    })}
                    placeholder="1.0"
                  />
                </FormField>
              </div>
            </TabsContent>
            
            {/* SEISMIC TAB */}
            <TabsContent value="seismic" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <FormField label="Parameter Ss (g)" fieldName="ss">
                  <Input
                    type="number"
                    step="0.01"
                    value={seismicParams.ss?.toString() || ''}
                    onChange={(e) => onUpdate('seismic', { 
                      ...seismicParams, 
                      ss: safeNumber(e.target.value, 0.8) 
                    })}
                    placeholder="0.8"
                  />
                </FormField>
                
                <FormField label="Parameter S1 (g)" fieldName="s1">
                  <Input
                    type="number"
                    step="0.01"
                    value={seismicParams.s1?.toString() || ''}
                    onChange={(e) => onUpdate('seismic', { 
                      ...seismicParams, 
                      s1: safeNumber(e.target.value, 0.3) 
                    })}
                    placeholder="0.3"
                  />
                </FormField>
                
                <FormField label="Kelas Situs">
                  <Select
                    value={seismicParams.siteClass || 'SD'}
                    onValueChange={(value) => onUpdate('seismic', { ...seismicParams, siteClass: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Pilih kelas situs" />
                    </SelectTrigger>
                    <SelectContent style={{zIndex: 9999}}>
                      <SelectItem value="SA">SA - Batuan Keras</SelectItem>
                      <SelectItem value="SB">SB - Batuan</SelectItem>
                      <SelectItem value="SC">SC - Tanah Keras</SelectItem>
                      <SelectItem value="SD">SD - Tanah Sedang</SelectItem>
                      <SelectItem value="SE">SE - Tanah Lunak</SelectItem>
                      <SelectItem value="SF">SF - Tanah Khusus</SelectItem>
                    </SelectContent>
                  </Select>
                </FormField>
              </div>
            </TabsContent>
            
            {/* SOIL TAB */}
            <TabsContent value="soil" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <FormField label="Muka Air Tanah (m)">
                  <Input
                    type="number"
                    step="0.5"
                    value={soilData.groundwaterDepth?.toString() || ''}
                    onChange={(e) => onUpdate('soil', { 
                      ...soilData, 
                      groundwaterDepth: safeNumber(e.target.value, 2.0) 
                    })}
                    placeholder="2.0"
                  />
                </FormField>
                
                <FormField label="Daya Dukung Tanah (kN/mÂ²)">
                  <Input
                    type="number"
                    value={soilData.bearingCapacity?.toString() || ''}
                    onChange={(e) => onUpdate('soil', { 
                      ...soilData, 
                      bearingCapacity: safeNumber(e.target.value, 200) 
                    })}
                    placeholder="200"
                  />
                </FormField>
              </div>
              
              <FormField label="Deskripsi Tanah">
                <Input
                  value={soilData.soilDescription || ''}
                  onChange={(e) => onUpdate('soil', { ...soilData, soilDescription: e.target.value })}
                  placeholder="Tanah liat sedang"
                />
              </FormField>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Action Button */}
      <div className="flex justify-end">
        <Button 
          onClick={onValidate}
          disabled={validationLoading}
          className="flex items-center gap-2 min-w-32"
        >
          {validationLoading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              Memvalidasi...
            </>
          ) : (
            <>
              <CheckCircle className="h-4 w-4" />
              Validasi Input
            </>
          )}
        </Button>
      </div>
    </div>
  );
};