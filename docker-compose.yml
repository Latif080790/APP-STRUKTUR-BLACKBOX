version: '3.8'

services:
  # Database PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: structural-analysis-db
    environment:
      POSTGRES_DB: structural_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: structural-analysis-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: structural-analysis-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: structural_analysis
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password123}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-structural-analysis-super-secret}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: structural-analysis-frontend
    environment:
      VITE_API_URL: ${BACKEND_URL:-http://localhost:3001/api}
      VITE_WS_URL: ${BACKEND_URL:-http://localhost:3001}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    restart: unless-stopped

  # Nginx Load Balancer (untuk production scaling)
  nginx:
    image: nginx:alpine
    container_name: structural-analysis-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

networks:
  default:
    name: structural-analysis-network
    driver: bridge